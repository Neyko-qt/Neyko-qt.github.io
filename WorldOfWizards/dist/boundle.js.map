{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/helper.js","webpack:///./js/arrays.js","webpack:///./js/task.js","webpack:///./js/player.js","webpack:///./js/zombie.js","webpack:///./js/ability.js","webpack:///./js/main.js","webpack:///./js/game.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","helper","[object Object]","array","Math","floor","random","length","min","max","tmpArray","sortArray","scoreTable","document","querySelector","tableValue","createElement","playerName","playerScore","innerText","appendChild","storageLength","localStorage","substr","push","getItem","split","Number","sortValues","slice","arr","j","tmp","index","currentIndex","__webpack_exports__","translateArr","book","bottle","window","mouse","owl","dragAndDropArr","hello","apple","table","water","countriesArr","img/countries/france.jpg","img/countries/russia.jpg","img/countries/norway.jpg","img/countries/turkey.jpg","img/countries/brazil.jpg","auditionArr","audio/audition/animal.mp3","audio/audition/account.mp3","audio/audition/amount.mp3","audio/audition/addition.mp3","audio/audition/answer.mp3","zombieDescription","bgLevel","adjective","noun","Task","this","type","expression","solutionArr","answerValue","getElementById","innerHTML","tasks","arithmetic","translate","audition","countries","dragAndDrop","_helper__WEBPACK_IMPORTED_MODULE_0__","randomValue","currentTask","firstValue","randomInterval","secondValue","typeOfoperator","operation","eval","toString","words","keys","_arrays__WEBPACK_IMPORTED_MODULE_1__","wordsLength","audioPlace","setAttribute","flagPlace","style","display","swappedArr","randomPosition","ul","classList","add","li","$","sortable","disableSelection","indexOf","toLowerCase","js_player","healthBar","health","round","attackAudio","Audio","audioHeal","createHealthBar","createAudio","width","preload","volume","src","play","remove","zombie_Zombie","createName","generateHealth","arrays","zombie","ability","typeOfAbility","task","event","target","getAttribute","randomTask","player","healing","setTimeout","stopHealing","attackHero","targetOfAttack","attack","hurt","stopAttack","stopHurt","monster","wasSolved","attackEnemy","heal","main_game","btnSelectedAbility","createPlayer","createZombie","createAbility","addEventListener","getType","btnAnswer","setAnswer","setDragAndDropAnswer","removeEventListener","cast","checkHealth","tmpAnswer","Array","forEach","children","item","die","finish","stopDie","createNewZombie","setItem","Date","now","drawScoreTable","bindedGame","start","btnStart"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,wCClFAC,EACAC,mBAAAC,GACA,OAAAA,EAAAC,KAAAC,MAAAD,KAAAE,SAAAH,EAAAI,SAGAL,sBAAAM,EAAAC,GACA,OAAAL,KAAAC,MAAAD,KAAAE,UAAAG,EAAAD,EAAA,IAAAA,EAGAN,wBACA,IAAAQ,EAAAT,EAAAU,YACAC,EAAAC,SAAAC,cAAA,SACA,QAAA7C,EAAA,EAAuBA,EAAAyC,EAAAH,OAAqBtC,IAAA,CAC5C,IAAA8C,EAAAF,SAAAG,cAAA,MACAC,EAAAJ,SAAAG,cAAA,MACAE,EAAAL,SAAAG,cAAA,MACAC,EAAAE,UAAAT,EAAAzC,GAAA,GACAiD,EAAAC,UAAAT,EAAAzC,GAAA,GACA8C,EAAAK,YAAAH,GACAF,EAAAK,YAAAF,GACAN,EAAAQ,YAAAL,IAKAb,mBACA,IAAAS,KACAU,EAAAC,aAAAf,OACA,QAAAtC,EAAA,EAAuBA,EAAAoD,EAAmBpD,IAC1C,SAAAqD,aAAA9B,IAAAvB,GAAAsD,OAAA,MACAZ,EAAAa,KAAAF,aAAAG,QAAAH,aAAA9B,IAAAvB,IAAAyD,MAAA,MAGA,QAAAzD,EAAA,EAAuBA,EAAA0C,EAAAJ,OAAsBtC,IAC7C0C,EAAA1C,GAAA,GAAA0D,OAAAhB,EAAA1C,GAAA,IAGA,OADA0C,EAAAV,EAAA2B,WAAAjB,GAAAkB,MAAA,MAIA3B,kBAAA4B,GACA,IAAAvB,EAAAuB,EAAAvB,OACA,QAAAtC,EAAA,EAAuBA,EAAAsC,EAAA,EAAgBtC,IACvC,QAAA8D,EAAA,EAA2BA,EAAAxB,EAAA,EAAAtC,EAAoB8D,IAC/C,GAAAD,EAAAC,EAAA,MAAAD,EAAAC,GAAA,IACA,IAAA5C,EAAA2C,EAAAC,EAAA,GACAD,EAAAC,EAAA,GAAAD,EAAAC,GACAD,EAAAC,GAAA5C,EAIA,OAAA2C,EAGA5B,sBAAAC,GACA,IACA6B,EACAC,EAFAC,EAAA/B,EAAAI,OAGA,SAAA2B,GACAD,EAAA7B,KAAAC,MAAAD,KAAAE,SAAA4B,GAEAF,EAAA7B,EADA+B,GAAA,GAEA/B,EAAA+B,GAAA/B,EAAA8B,GACA9B,EAAA8B,GAAAD,EAEA,OAAA7B,GAKAgC,EAAA,kMCtEA,MAAAC,GACAC,MAAA,SACAC,QAAA,WACAC,QAAA,QACAC,OAAA,QACAC,KAAA,SAIAC,GACAL,MAAA,QACAM,OAAA,SACAL,QAAA,UACAM,OAAA,SACAC,OAAA,SACAC,OAAA,UAGAC,GACAC,4BAAA,UACAC,4BAAA,UACAC,4BAAA,UACAC,4BAAA,UACAC,4BAAA,WAIAC,GACAC,4BAAA,SACAC,6BAAA,UACAC,4BAAA,SACAC,8BAAA,WACAC,4BAAA,UAIAC,GACAC,SAAA,mBAEAC,WAAA,4EACAC,MAAA,0DACAtF,MAAA,8QCjCAuF,KACA7D,cACA8D,KAAAC,KACAD,KAAAE,WACAF,KAAAG,eACAH,KAAAI,YAGAlE,aACAW,SAAAwD,eAAA,aAAAC,UAAA,GACAzD,SAAAwD,eAAA,eAAAnF,MAAA,GACA,MAAAqF,GAAAP,KAAAQ,WAAAR,KAAAS,UAAAT,KAAAU,SAAAV,KAAAW,UAAAX,KAAAY,aACAC,qCAAA,EAAAC,YAAAP,GAAA9E,KAAAuE,KACAe,GAIA7E,aACA8D,KAAAC,KAAA,aACA,MAAAe,WAAAH,qCAAA,EAAAI,eAAA,OACAC,YAAAL,qCAAA,EAAAI,eAAA,OACAE,gBAAA,iBACAC,UAAAP,qCAAA,EAAAC,YAAAK,gBACAnB,KAAAE,WAAAc,WAAAI,UAAAF,YACAlB,KAAAG,YAAA3C,KAAA6D,KAAArB,KAAAE,YAAAoB,YACAzE,SAAAC,cAAA,cAAAwD,UAAA,qBAAAN,KAAAE,WAGAhE,YACA8D,KAAAC,KAAA,YACA,MAAAsB,EAAA5G,OAAA6G,KAAAC,qCAAA,GACAC,EAAAH,EAAAhF,OACAyD,KAAAE,WAAAqB,EAAAV,qCAAA,EAAAI,eAAA,EAAAS,EAAA,IACA1B,KAAAG,YAAAsB,qCAAA,EAAAzB,KAAAE,YAEArD,SAAAC,cAAA,cAAAwD,UAAA,2BAAAN,KAAAE,WAGAhE,WACA8D,KAAAC,KAAA,WACA,MAAAsB,EAAA5G,OAAA6G,KAAAC,qCAAA,GACAC,EAAAH,EAAAhF,OACAyD,KAAAE,WAAAqB,EAAAV,qCAAA,EAAAI,eAAA,EAAAS,EAAA,IACA1B,KAAAG,YAAA3C,KAAAiE,qCAAA,EAAAzB,KAAAE,aAEA,MAAAyB,EAAA9E,SAAAG,cAAA,SACA2E,EAAAC,aAAA,MAAA5B,KAAAE,YACAyB,EAAAC,aAAA,eACA/E,SAAAwD,eAAA,aAAAjD,YAAAuE,GACA9E,SAAAC,cAAA,cAAAwD,UAAA,kBAGApE,YACA8D,KAAAC,KAAA,YACA,MAAAsB,EAAA5G,OAAA6G,KAAAC,qCAAA,GACAC,EAAAH,EAAAhF,OACAyD,KAAAE,WAAAqB,EAAAV,qCAAA,EAAAI,eAAA,EAAAS,EAAA,IACA1B,KAAAG,YAAAsB,qCAAA,EAAAzB,KAAAE,YAEA,MAAA2B,EAAAhF,SAAAG,cAAA,OACA6E,EAAAD,aAAA,MAAA5B,KAAAE,YACArD,SAAAwD,eAAA,aAAAjD,YAAAyE,GACAhF,SAAAC,cAAA,cAAAwD,UAAA,uBAGApE,cACA8D,KAAAC,KAAA,cACApD,SAAAwD,eAAA,eAAAyB,MAAAC,QAAA,OAEA,MAAAR,EAAA5G,OAAA6G,KAAAC,qCAAA,GACAC,EAAAH,EAAAhF,OACAyD,KAAAE,WAAAqB,EAAAV,qCAAA,EAAAI,eAAA,EAAAS,EAAA,IACA1B,KAAAG,YAAAsB,qCAAA,EAAAzB,KAAAE,YAEA,MAAA8B,EAAAnB,qCAAA,EAAAoB,eAAAjC,KAAAE,WAAAxC,MAAA,KAEAwE,EAAArF,SAAAG,cAAA,MACAkF,EAAAC,UAAAC,IAAA,YAEA,QAAAnI,EAAA,EAAuBA,EAAA+H,EAAAzF,OAAuBtC,IAAA,CAC9C,MAAAoI,EAAAxF,SAAAG,cAAA,MACAqF,EAAA/B,UAAA0B,EAAA/H,GACAiI,EAAA9E,YAAAiF,GAGAxF,SAAAwD,eAAA,aAAAjD,YAAA8E,GAEAI,EAAA,WACAA,EAAA,aAAAC,WAAAC,qBAGA3F,SAAAC,cAAA,cAAAwD,UAAA,0BAMApE,YACA,OAAA8D,KAAAG,YAAAsC,QAAAzC,KAAAI,YAAAsC,gBAAA,GAKAvE,oBAAA,4CCrCA,IAAAwE,QAzEAzG,YAAA1B,GACAwF,KAAAxF,OACAwF,KAAA4C,UAAA,IACA5C,KAAA6C,OAAA7C,KAAA4C,UACA5C,KAAA8C,MAAA,EACA9C,KAAA+C,YAAA,IAAAC,MACAhD,KAAAiD,UAAA,IAAAD,MAGA9G,eACAW,SAAAC,cAAA,eAAAwD,UAAAN,KAAAxF,KACAwF,KAAAkD,kBACAlD,KAAAmD,cAGAjH,kBACAW,SAAAC,cAAA,sBAAAgF,MAAAsB,MAAApD,KAAA6C,OAAA7C,KAAA4C,UAAA,QACA/F,SAAAC,cAAA,sBAAAwD,UAAAN,KAAA6C,OAGA3G,cACA8D,KAAA+C,YAAAM,QAAA,OACArD,KAAA+C,YAAAO,OAAA,EACAtD,KAAA+C,YAAAQ,IAAA,2BACAvD,KAAAiD,UAAAI,QAAA,OACArD,KAAAiD,UAAAK,OAAA,EACAtD,KAAAiD,UAAAM,IAAA,yBAGArH,SACA8D,KAAA+C,YAAAS,OACA3G,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,gBAGAlG,aACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,gBACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,UACA8D,KAAAiD,UAAAO,OACA3G,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,cACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,OACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,WACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,MACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,aAGAlG,cACA,OAAA8D,KAAA6C,OAAA,wBC/DAa,EACAxH,YAAA4G,GACA9C,KAAA8C,QACA9C,KAAAxF,KAAAkJ,EAAAC,aACA3D,KAAA4C,UAAAc,EAAAE,eAAA5D,KAAA8C,OACA9C,KAAA6C,OAAA7C,KAAA4C,UACA5C,KAAA+C,YAAA,IAAAC,MAGA9G,eACAW,SAAAC,cAAA,aAAAqF,UAAAC,IAAAyB,EAAA,EAAAjE,QAAAI,KAAA8C,MAAAe,EAAA,EAAAjE,QAAArD,SACAM,SAAAC,cAAA,aAAAqF,UAAAsB,OAAAI,EAAA,EAAAjE,SAAAI,KAAA8C,MAAA,GAAAe,EAAA,EAAAjE,QAAArD,SACAM,SAAAC,cAAA,eAAAwD,UAAAN,KAAAxF,KACAqC,SAAAC,cAAA,YAAAwD,UAAA,UAAAN,KAAA8C,MAAA,GACA9C,KAAAkD,kBACAlD,KAAAmD,cAGAjH,kBACAW,SAAAC,cAAA,sBAAAgF,MAAAsB,MAAApD,KAAA6C,OAAA7C,KAAA4C,UAAA,QACA/F,SAAAC,cAAA,sBAAAwD,UAAAN,KAAA6C,OAGA3G,cACA8D,KAAA+C,YAAAM,QAAA,OACArD,KAAA+C,YAAAO,OAAA,EACAtD,KAAA+C,YAAAQ,IAAA,2BAGArH,SACA8D,KAAA+C,YAAAS,OACA3G,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,gBAGAlG,aACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,gBACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,OACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,WACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAGAlG,MACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,cACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,aAGAlG,UACAW,SAAAC,cAAA,kBAAAqF,UAAAsB,OAAA,aACA5G,SAAAC,cAAA,kBAAAqF,UAAAC,IAAA,cAIAlG,cACA,OAAA8D,KAAA6C,OAAA,EAGA3G,oBAIA,OAHAD,EAAA,EAAA6E,YAAA+C,EAAA,EAAAhE,WAGA,IAFA5D,EAAA,EAAA6E,YAAA+C,EAAA,EAAA/D,MAEA,IADA7D,EAAA,EAAA6E,YAAA+C,EAAA,EAAArJ,MAIA0B,sBAAA4G,GACA,aAAAA,EAAA7G,EAAA,EAAAgF,eAAA,OAIA,IAAA6C,EAAA,SC9BA,IAAAC,QAhDA7H,cACA8D,KAAAgE,cACAhE,KAAAiE,KAGA/H,gBACAW,SAAAC,cAAA,gBAAAgF,MAAAC,QAAA,QAGA7F,QAAAgI,GACAlE,KAAAgE,cAAAE,EAAAC,OAAAC,aAAA,MACAvH,SAAAC,cAAA,gBAAAgF,MAAAC,QAAA,OACAlF,SAAAC,cAAA,gBAAAgF,MAAAC,QAAA,QACA/B,KAAAiE,KAAA,IAAAA,EAAA,EACAjE,KAAAiE,KAAAI,aAGAnI,KAAAoI,GACAA,EAAAzB,OAAAzG,KAAAI,IAAA8H,EAAAzB,OAAA5G,EAAA,EAAAgF,eAAA,QAAAqD,EAAAxB,OAAAwB,EAAA1B,WACA0B,EAAApB,kBACAoB,EAAAC,UACAC,WAAAF,EAAAG,YAAA,KAGAvI,YAAAwI,EAAAC,GACAA,EAAA9B,OAAAzG,KAAAK,IAAAkI,EAAA9B,OAAA5G,EAAA,EAAAgF,eAAA,MAAA0D,EAAA7B,OAAA,GACA6B,EAAAzB,kBACAwB,EAAAE,SACAD,EAAAE,OACAL,WAAAE,EAAAI,WAAArJ,KAAAiJ,GAAA,KACAF,WAAAG,EAAAI,SAAAtJ,KAAAkJ,GAAA,KAGAzI,KAAAoI,EAAAU,GACA,OAAAhF,KAAAgE,eACA,oBACAhE,KAAAiE,KAAAgB,YAAAjF,KAAAkF,YAAAZ,EAAAU,GAAAhF,KAAAkF,YAAAF,EAAAV,GACA,MACA,kBACAtE,KAAAiE,KAAAgB,YAAAjF,KAAAmF,KAAAb,GAAAtE,KAAAkF,YAAAF,EAAAV,MCzCA,IAAAc,EAAA,UCOAlJ,cACA8D,KAAAqF,mBACArF,KAAAsE,OACAtE,KAAA8D,OACA9D,KAAA+D,QAGA7H,QACAW,SAAAC,cAAA,iBAAAgF,MAAAC,QAAA,OACAlF,SAAAC,cAAA,aAAAgF,MAAAC,QAAA,QACA,MAAA9E,EAAAJ,SAAAC,cAAA,SAAA5B,MAEA8E,KAAAsE,OAAA,IAAA3B,EAAA1F,GACA+C,KAAAsE,OAAAgB,eAEAtF,KAAA8D,OAAA,IAAAA,EAAA9D,KAAAsE,OAAAxB,OACA9C,KAAA8D,OAAAyB,aAAAvF,KAAAsE,QAEAtE,KAAA+D,QAAA,IAAAA,EACA/D,KAAAqF,mBAAArF,KAAA+D,QAAAyB,cAAA/J,KAAAuE,KAAA+D,SACAsB,mBAAAI,iBAAA,QAAAzF,KAAAqF,oBACAxI,SAAAC,cAAA,cAAA2I,iBAAA,aACAzF,KAAA+D,QAAA2B,QAAAxB,SAEAyB,UAAAF,iBAAA,aACAzF,KAAA4F,cAIA1J,YACA,gBAAA8D,KAAA+D,QAAAE,KAAAhE,MACAD,KAAA6F,uBAEA7F,KAAA+D,QAAAE,KAAA7D,YAAAvD,SAAAwD,eAAA,eAAAnF,MAAAoG,WACAzE,SAAAC,cAAA,gBAAAgF,MAAAC,QAAA,OACAsD,mBAAAS,oBAAA,QAAA9F,KAAAqF,oBACArF,KAAA+D,QAAAgC,KAAA/F,KAAAsE,OAAAtE,KAAA8D,QACAU,WAAAxE,KAAAgG,YAAAvK,KAAAuE,MAAA,KAGA9D,uBACA,MAAAgG,EAAArF,SAAAC,cAAA,aACA,IAAAmJ,EAAA,GACAC,MAAArK,UAAAsK,QAAA/L,KAAA8H,EAAAkE,SAAAC,IACAJ,GAAAI,EAAAlJ,YAEAN,SAAAwD,eAAA,eAAAnF,MAAA+K,EACApJ,SAAAwD,eAAA,eAAAyB,MAAAC,QAAA,eAGA7F,cACA8D,KAAA8D,OAAAkC,cAIShG,KAAAsE,OAAA0B,cAITX,mBAAAI,iBAAA,QAAAzF,KAAAqF,qBAHArF,KAAAsE,OAAAgC,MACA9B,WAAA,IAAAxE,KAAAuG,SAAA,OALAvG,KAAA8D,OAAAwC,MACA9B,WAAA,IAAAxE,KAAA8D,OAAA0C,UAAA,MACAhC,WAAA,IAAAxE,KAAAyG,kBAAA,MASAvK,kBACAW,SAAAC,cAAA,kBAEAkD,KAAAsE,OAAAxB,OAAA,EACA9C,KAAA8D,OAAA,IAAAA,EAAA9D,KAAAsE,OAAAxB,OACA9C,KAAA8D,OAAAyB,aAAAvF,KAAAsE,QACAtE,KAAAsE,OAAAzB,OAAAzG,KAAAI,IAAAwD,KAAAsE,OAAAzB,OAAA5G,EAAA,EAAAgF,eAAA,MAAAjB,KAAAsE,OAAAxB,OAAA9C,KAAAsE,OAAA1B,WACA5C,KAAAsE,OAAApB,kBACAmC,mBAAAI,iBAAA,QAAAzF,KAAAqF,oBAGAnJ,SACAW,SAAAC,cAAA,aAAAgF,MAAAC,QAAA,OACAlF,SAAAC,cAAA,eAAAgF,MAAAC,QAAA,QACAzE,aAAAoJ,QAAA,OAAAC,KAAAC,MAAA5G,KAAAsE,OAAA9J,KAAA,IAAAwF,KAAAsE,OAAA,OACArI,EAAA,EAAA4K,mBDpFAC,EAAA1B,EAAA2B,MAAAtL,KAAA2J,GACA4B,SAAAvB,iBAAA,QAAAqB","file":"boundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","class helper {\n    static randomValue(array) {\n        return array[Math.floor(Math.random() * array.length)];\n    }\n\n    static randomInterval(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;;\n    }\n\n    static drawScoreTable() {\n        let tmpArray = helper.sortArray();\n        let scoreTable = document.querySelector('table');\n        for (let i = 0; i < tmpArray.length; i++) {\n            let tableValue = document.createElement(\"tr\");\n            let playerName = document.createElement(\"td\");\n            let playerScore = document.createElement(\"td\");\n            playerName.innerText = tmpArray[i][0];\n            playerScore.innerText = tmpArray[i][1];\n            tableValue.appendChild(playerName);\n            tableValue.appendChild(playerScore);\n            scoreTable.appendChild(tableValue);\n        }\n    }\n\n    /*returns a sorted array of 10 top scores*/\n    static sortArray() {\n        let sortArray = [];\n        let storageLength = localStorage.length;\n        for (let i = 0; i < storageLength; i++) {\n            if (localStorage.key(i).substr(0, 4) === 'game') {\n                sortArray.push(localStorage.getItem(localStorage.key(i)).split(','));\n            }\n        }\n        for (let i = 0; i < sortArray.length; i++) {\n            sortArray[i][1] = Number(sortArray[i][1]);\n        }\n        sortArray = helper.sortValues(sortArray).slice(0, 10);\n        return sortArray;\n    }\n\n    static sortValues(arr) {\n        let length = arr.length;\n        for (let i = 0; i < length - 1; i++) {\n            for (let j = 0; j < length - 1 - i; j++) {\n                if (arr[j + 1][1] > arr[j][1]) {\n                    let t = arr[j + 1];\n                    arr[j + 1] = arr[j];\n                    arr[j] = t;\n                }\n            }\n        }\n        return arr;\n    }\n\n    static randomPosition(array) {\n        let currentIndex = array.length;\n        let tmp;\n        let index;\n        while (currentIndex !== 0) {\n            index = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n            tmp = array[currentIndex];\n            array[currentIndex] = array[index];\n            array[index] = tmp;\n        }\n        return array;\n    }\n\n}\n\nexport default helper;","export const translateArr = {\n    \"book\": [\"книга\"],\n    \"bottle\": [\"бутылка\"],\n    \"window\": [\"окно\"],\n    \"mouse\": [\"мышь\"],\n    \"owl\": [\"сова\"]\n};\n\n\nexport const dragAndDropArr = {\n    \"book\": [\"book\"],\n    \"hello\": [\"hello\"],\n    \"bottle\": [\"bottle\"],\n    \"apple\": [\"apple\"],\n    \"table\": [\"table\"],\n    \"water\": [\"water\"]\n};\n\nexport const countriesArr = {\n    \"img/countries/france.jpg\": [\"france\"],\n    \"img/countries/russia.jpg\": [\"russia\"],\n    \"img/countries/norway.jpg\": [\"normay\"],\n    \"img/countries/turkey.jpg\": [\"turkey\"],\n    \"img/countries/brazil.jpg\": [\"brazil\"]\n};\n\n\nexport const auditionArr = {\n    \"audio/audition/animal.mp3\": \"animal\",\n    \"audio/audition/account.mp3\": \"account\",\n    \"audio/audition/amount.mp3\": \"amount\",\n    \"audio/audition/addition.mp3\": \"addition\",\n    \"audio/audition/answer.mp3\": \"answer\"\n};\n\n\nexport const zombieDescription = {\n    \"bgLevel\": ['bg1', 'bg2', 'bg3'],\n\n    \"adjective\": [\"Ужасный\", \"Вонючий\", \"Глупый\", \"Тупой\", \"Злой\", \"Уродливый\", \"Пухлый\", \"Вредный\"],\n    \"noun\": [\"Толстяк\", \"Ворчун\", \"Слизняк\", \"Глупец\", \"Кульдюк\", \"Пердун\"],\n    \"name\": [\"Герман\", \"Артур\", \"Измаил\", \"Аркадий\", \"Лаврентий\", \"Маркус\", \"Арсений\"]\n\n};","import helper from \"./helper\";\nimport {\n    translateArr,\n    auditionArr,\n    countriesArr,\n    dragAndDropArr\n} from \"./arrays\";\n\nclass Task {\n    constructor() {\n        this.type;\n        this.expression;\n        this.solutionArr = [];\n        this.answerValue;\n    }\n\n    randomTask() {\n        document.getElementById('tempMedia').innerHTML = '';\n        document.getElementById('answerInput').value = '';\n        const tasks = [this.arithmetic, this.translate, this.audition, this.countries, this.dragAndDrop];\n        const currentTask = helper.randomValue(tasks).bind(this);\n        currentTask();\n\n    }\n\n    arithmetic() {\n        this.type = \"arithmetic\";\n        const firstValue = helper.randomInterval(0, 100);\n        const secondValue = helper.randomInterval(0, 100);\n        const typeOfoperator = ['+', '-', '*', '/'];\n        const operation = helper.randomValue(typeOfoperator);\n        this.expression = firstValue + operation + secondValue;\n        this.solutionArr.push(eval(this.expression).toString());\n        document.querySelector('.condition').innerHTML = \"Your solution:<br>\" + this.expression;\n    }\n\n    translate() {\n        this.type = \"translate\";\n        const words = Object.keys(translateArr);\n        const wordsLength = words.length;\n        this.expression = words[helper.randomInterval(0, wordsLength - 1)];\n        this.solutionArr = translateArr[this.expression];\n\n        document.querySelector('.condition').innerHTML = \"Translate this word:<br>\" + this.expression;\n    }\n\n    audition() {\n        this.type = \"audition\";\n        const words = Object.keys(auditionArr);\n        const wordsLength = words.length;\n        this.expression = words[helper.randomInterval(0, wordsLength - 1)];\n        this.solutionArr.push(auditionArr[this.expression]);\n\n        const audioPlace = document.createElement(\"audio\");\n        audioPlace.setAttribute(\"src\", this.expression);\n        audioPlace.setAttribute(\"controls\", \"\");\n        document.getElementById('tempMedia').appendChild(audioPlace);\n        document.querySelector('.condition').innerHTML = \"Repeat the word\";\n    }\n\n    countries() {\n        this.type = \"countries\";\n        const words = Object.keys(countriesArr);\n        const wordsLength = words.length;\n        this.expression = words[helper.randomInterval(0, wordsLength - 1)];\n        this.solutionArr = countriesArr[this.expression];\n\n        const flagPlace = document.createElement(\"img\");\n        flagPlace.setAttribute(\"src\", this.expression);\n        document.getElementById('tempMedia').appendChild(flagPlace);\n        document.querySelector('.condition').innerHTML = \"What is the country?\";\n    }\n\n    dragAndDrop() {\n        this.type = \"dragAndDrop\";\n        document.getElementById('answerInput').style.display = \"none\";\n\n        const words = Object.keys(dragAndDropArr);\n        const wordsLength = words.length;\n        this.expression = words[helper.randomInterval(0, wordsLength - 1)];\n        this.solutionArr = dragAndDropArr[this.expression];\n\n        const swappedArr = helper.randomPosition(this.expression.split(\"\"));\n\n        const ul = document.createElement(\"ul\");\n        ul.classList.add(\"sortable\");\n\n        for (let i = 0; i < swappedArr.length; i++) {\n            const li = document.createElement(\"li\");\n            li.innerHTML = swappedArr[i];\n            ul.appendChild(li);\n        }\n\n        document.getElementById('tempMedia').appendChild(ul);\n\n        $(function () {\n            $(\".sortable\").sortable().disableSelection();\n        });\n\n        document.querySelector('.condition').innerHTML = \"make word from letters:\";\n    }\n\n\n\n\n    wasSolved() {\n        return this.solutionArr.indexOf(this.answerValue.toLowerCase()) > -1;\n    }\n\n}\n\nexport default Task;","class Player {\n    constructor(name) {\n        this.name = name;\n        this.healthBar = 100;\n        this.health = this.healthBar;\n        this.round = 0;\n        this.attackAudio = new Audio();\n        this.audioHeal = new Audio();\n    }\n\n    createPlayer() {\n        document.querySelector('.playerName').innerHTML = this.name;\n        this.createHealthBar();\n        this.createAudio();\n    }\n\n    createHealthBar() {\n        document.querySelector('.playerHealthCount').style.width = this.health / this.healthBar * 100 + \"%\";\n        document.querySelector('.playerHealthCount').innerHTML = this.health;\n    }\n\n    createAudio() {\n        this.attackAudio.preload = 'auto';\n        this.attackAudio.volume = 1;\n        this.attackAudio.src = './audio/playerAttack.mp3';\n        this.audioHeal.preload = 'auto';\n        this.audioHeal.volume = 1;\n        this.audioHeal.src = './audio/playerHeal.mp3';\n    }\n\n    attack() {\n        this.attackAudio.play();\n        document.querySelector('.playerPicture').classList.remove('playerStay');\n        document.querySelector('.playerPicture').classList.add('playerAttack');\n    }\n\n    stopAttack() {\n        document.querySelector('.playerPicture').classList.remove('playerAttack');\n        document.querySelector('.playerPicture').classList.add('playerStay');\n    }\n\n    healing() {\n        this.audioHeal.play();\n        document.querySelector('.playerPicture').classList.remove('playerStay');\n        document.querySelector('.playerPicture').classList.add('playerHeal');\n    }\n\n    stopHealing() {\n        document.querySelector('.playerPicture').classList.remove('playerHeal');\n        document.querySelector('.playerPicture').classList.add('playerStay');\n    }\n\n    hurt() {\n        document.querySelector('.playerPicture').classList.remove('playerStay');\n        document.querySelector('.playerPicture').classList.add('playerHurt');\n    }\n\n    stopHurt() {\n        document.querySelector('.playerPicture').classList.remove('playerHurt');\n        document.querySelector('.playerPicture').classList.add('playerStay');\n    }\n\n    die() {\n        document.querySelector('.playerPicture').classList.remove('playerStay');\n        document.querySelector('.playerPicture').classList.add('playerDie');\n    }\n\n    checkHealth() {\n        return this.health > 0;\n    }\n\n\n}\n\nexport default Player;","import helper from \"./helper\";\nimport {\n    zombieDescription\n} from \"./arrays\";\n\nclass Zombie {\n    constructor(round) {\n        this.round = round;\n        this.name = Zombie.createName();\n        this.healthBar = Zombie.generateHealth(this.round);\n        this.health = this.healthBar;\n        this.attackAudio = new Audio();\n    }\n\n    createZombie() {\n        document.querySelector('.mainGame').classList.add(zombieDescription.bgLevel[this.round % zombieDescription.bgLevel.length]);\n        document.querySelector('.mainGame').classList.remove(zombieDescription.bgLevel[(this.round - 1) % zombieDescription.bgLevel.length]);\n        document.querySelector('.zombieName').innerHTML = this.name;\n        document.querySelector('.counter').innerHTML = \"round \" + (this.round + 1);\n        this.createHealthBar();\n        this.createAudio();\n    }\n\n    createHealthBar() {\n        document.querySelector('.zombieHealthCount').style.width = this.health / this.healthBar * 100 + \"%\";\n        document.querySelector('.zombieHealthCount').innerHTML = this.health;\n    }\n\n    createAudio() {\n        this.attackAudio.preload = 'auto';\n        this.attackAudio.volume = 1;\n        this.attackAudio.src = './audio/zombieAttack.mp3';\n    }\n\n    attack() {\n        this.attackAudio.play();\n        document.querySelector('.zombiePicture').classList.remove('zombieStay');\n        document.querySelector('.zombiePicture').classList.add('zombieAttack');\n    }\n\n    stopAttack() {\n        document.querySelector('.zombiePicture').classList.remove('zombieAttack');\n        document.querySelector('.zombiePicture').classList.add('zombieStay');\n    }\n\n    hurt() {\n        document.querySelector('.zombiePicture').classList.remove('zombieStay');\n        document.querySelector('.zombiePicture').classList.add('zombieHurt');\n    }\n\n    stopHurt() {\n        document.querySelector('.zombiePicture').classList.remove('zombieHurt');\n        document.querySelector('.zombiePicture').classList.add('zombieStay');\n    }\n\n    die() {\n        document.querySelector('.zombiePicture').classList.remove('zombieStay');\n        document.querySelector('.zombiePicture').classList.add('zombieDie');\n    }\n\n    stopDie() {\n        document.querySelector('.zombiePicture').classList.remove('zombieDie');\n        document.querySelector('.zombiePicture').classList.add('zombieStay');\n    }\n\n\n    checkHealth() {\n        return this.health > 0;\n    }\n\n    static createName() {\n        const randomAdj = helper.randomValue(zombieDescription.adjective);\n        const randomNoun = helper.randomValue(zombieDescription.noun);\n        const randomName = helper.randomValue(zombieDescription.name);\n        return randomAdj + ' ' + randomNoun + ' ' + randomName;\n    }\n\n    static generateHealth(round) {\n        return (30 + round * 10 + helper.randomInterval(0, 10));\n    }\n}\n\nexport default Zombie;","import Task from \"./task\";\nimport helper from \"./helper\";\n\nclass Ability {\n    constructor() {\n        this.typeOfAbility;\n        this.task;\n    }\n\n    createAbility() {\n        document.querySelector('.abilityPage').style.display = \"block\";\n    }\n\n    getType(event) {\n        this.typeOfAbility = event.target.getAttribute('id');\n        document.querySelector('.abilityPage').style.display = \"none\";\n        document.querySelector('.taskSection').style.display = \"block\";\n        this.task = new Task();\n        this.task.randomTask();\n    }\n\n    heal(player) {\n        player.health = Math.min(player.health + helper.randomInterval(20, 25 + player.round * 5), player.healthBar);\n        player.createHealthBar();\n        player.healing();\n        setTimeout(player.stopHealing, 2000);\n    }\n\n    attackEnemy(attackHero, targetOfAttack) {\n        targetOfAttack.health = Math.max(targetOfAttack.health - helper.randomInterval(20, 25 + targetOfAttack.round), 0);\n        targetOfAttack.createHealthBar();\n        attackHero.attack();\n        targetOfAttack.hurt();\n        setTimeout(attackHero.stopAttack.bind(attackHero), 2000);\n        setTimeout(targetOfAttack.stopHurt.bind(targetOfAttack), 2000);\n    }\n\n    cast(player, monster) {\n        switch (this.typeOfAbility) {\n            case 'attackAbility':\n                this.task.wasSolved() ? this.attackEnemy(player, monster) : this.attackEnemy(monster, player);\n                break;\n            case 'healAbility':\n                this.task.wasSolved() ? this.heal(player) : this.attackEnemy(monster, player);\n                break;\n            default:\n                null;\n        }\n\n    }\n}\n\nexport default Ability;","import Game from \"./game.js\";\n\nlet game = new Game();\nlet bindedGame = game.start.bind(game);\nbtnStart.addEventListener('click', bindedGame);","import Player from \"./player\";\nimport Zombie from \"./zombie\";\nimport helper from \"./helper\";\nimport Ability from \"./ability\";\nimport {\n    zombieDescription\n} from \"./arrays\";\n\nclass Game {\n    constructor() {\n        this.btnSelectedAbility;\n        this.player;\n        this.zombie;\n        this.ability;\n    }\n\n    start() {\n        document.querySelector('.registration').style.display = \"none\";\n        document.querySelector('.mainGame').style.display = \"block\";\n        const playerName = document.querySelector('input').value;\n\n        this.player = new Player(playerName);\n        this.player.createPlayer();\n\n        this.zombie = new Zombie(this.player.round);\n        this.zombie.createZombie(this.player);\n\n        this.ability = new Ability();\n        this.btnSelectedAbility = this.ability.createAbility.bind(this.ability);\n        btnSelectedAbility.addEventListener('click', this.btnSelectedAbility);\n        document.querySelector('.abilities').addEventListener('click', () => {\n            this.ability.getType(event)\n        });\n        btnAnswer.addEventListener('click', () => {\n            this.setAnswer()\n        });\n    }\n\n    setAnswer() {\n        if (this.ability.task.type === \"dragAndDrop\") {\n            this.setDragAndDropAnswer();\n        }\n        this.ability.task.answerValue = document.getElementById('answerInput').value.toString();\n        document.querySelector('.taskSection').style.display = \"none\";\n        btnSelectedAbility.removeEventListener('click', this.btnSelectedAbility);\n        this.ability.cast(this.player, this.zombie);\n        setTimeout(this.checkHealth.bind(this), 2000);\n    }\n\n    setDragAndDropAnswer() {\n        const ul = document.querySelector('.sortable');\n        let tmpAnswer = '';\n        Array.prototype.forEach.call(ul.children, (item) => {\n            tmpAnswer += item.innerText;\n        });\n        document.getElementById('answerInput').value = tmpAnswer;\n        document.getElementById('answerInput').style.display = \"inline-block\";\n    }\n\n    checkHealth() {\n        if (!this.zombie.checkHealth()) {\n            this.zombie.die();\n            setTimeout(() => this.zombie.stopDie(), 1999);\n            setTimeout(() => this.createNewZombie(), 2000);\n        } else if (!this.player.checkHealth()) {\n            this.player.die();\n            setTimeout(() => this.finish(), 3000);\n        } else {\n            btnSelectedAbility.addEventListener('click', this.btnSelectedAbility);\n        }\n    }\n\n    createNewZombie() {\n        const zombiePicture = document.querySelector('.zombiePicture');\n\n        this.player.round += 1;\n        this.zombie = new Zombie(this.player.round);\n        this.zombie.createZombie(this.player);\n        this.player.health = Math.min(this.player.health + helper.randomInterval(10, 15 + this.player.round), this.player.healthBar);\n        this.player.createHealthBar();\n        btnSelectedAbility.addEventListener('click', this.btnSelectedAbility);\n    }\n\n    finish() {\n        document.querySelector('.mainGame').style.display = \"none\";\n        document.querySelector('.scoreTable').style.display = \"block\";\n        localStorage.setItem('game' + Date.now(), this.player.name + ',' + (this.player.round));\n        helper.drawScoreTable();\n    }\n\n}\n\nexport default Game;"],"sourceRoot":""}